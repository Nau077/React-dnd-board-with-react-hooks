{"version":3,"sources":["components/CardModule/CardPopup/CardInfo.js","components/CardModule/Card.js","context.js","components/BoardModule/BoardPopup/AddCardPopup.js","components/BoardModule/BoardHeader.js","components/BoardModule/Board.js","components/BoardModule/BoardList.js","reducer.js","utils/BaseState.js","App.js","serviceWorker.js","index.js"],"names":["CardInfo","props","closePopup","closeCardInfoHandler","className","onClick","e","stopPropagation","board_name","card_title","Card","useState","isShowInfo","setIsShowInfo","id","draggable","onDragStart","target","dataTransfer","setData","type","title","boardId","onDragOver","card_id","Context","React","createContext","AddCardPopup","dispatch","useContext","cardTitle","setCardTitle","setPopupValue","value","onKeyPress","key","length","payload","board_id","card","uuid","onChange","event","preventDefault","BoardHeader","canBeAdded","boardName","colorBg","isShow","setIsShow","style_circle","background","style","Board","cards","color","onDrop","board_type","card_type","getData","target_parsed","JSON","parse","board_old_id","board_new_id","map","item","BoardList","boards","state","action","board","cardIndex","findIndex","splice","push","BASE_STATE","App","useReducer","reducer","localStorage","getItem","useEffect","setItem","stringify","Provider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uMAiDeA,MA5Cf,SAAmBC,GAEf,IAMMC,EAAa,WAEfD,EAAME,wBAIV,OACI,yBACIC,UAAU,kBACVC,QAASH,GAET,yBAAKE,UAAU,gBAEXC,QAnBoB,SAAAC,GAE5BA,EAAEC,oBAmBM,yBAAKH,UAAU,UACX,8BACI,8BACI,gMACA,yBAAKA,UAAU,gBACX,8FAAkBH,EAAMO,YACxB,oGAAmBP,EAAMQ,aAE7B,yBAAKL,UAAU,iBACX,4BACIC,QAASH,GADb,qDCkBjBQ,MAnDf,SAAcT,GAAQ,IAAD,EAEoBU,mBAAS,MAF7B,mBAETC,EAFS,KAEGC,EAFH,KA+BjB,OACI,6BACI,yBACIR,QAxBgB,WAExBQ,GAAc,IAuBNC,GAAIb,EAAMa,GACVV,UAAWH,EAAMG,UACjBW,UAAWd,EAAMc,UACjBC,YAtBM,SAAAV,GACd,IAAMW,EAASX,EAAEW,OAEjBX,EAAEY,aAAaC,QAAQ,SAAvB,sBAAgDF,EAAOH,GAAvD,qBAAsEb,EAAMa,GAA5E,uBAA6Fb,EAAMmB,KAAnG,wBAAuHnB,EAAMoB,MAA7H,2BAAqJpB,EAAMqB,QAA3J,SAoBQC,WAhBK,SAAAjB,GAEbA,EAAEC,oBAgBM,2BAAIN,EAAMoB,QAGbT,GACT,kBAAC,EAAD,CAAUT,qBAzCmB,WAEzBU,EAAc,OAuCsCW,QAAUvB,EAAMa,GAAIL,WAAYR,EAAMoB,MAAOb,WAAYP,EAAMO,eC/C9GiB,EAAUC,IAAMC,gB,QCsGdC,MAjGf,SAAuB3B,GAAS,IAEpB4B,EAAaC,qBAAWL,GAAxBI,SAFmB,EAIOlB,mBAAS,IAJhB,mBAIpBoB,EAJoB,KAITC,EAJS,KA8DrB9B,EAAa,WAEfD,EAAMgC,iBAEV,OACI,yBACI7B,UAAU,kBACVC,QAASH,GAET,yBAAKE,UAAU,gBAEXC,QAhBoB,SAAAC,GAC5BA,EAAEC,oBAiBM,yBAAKH,UAAU,kBACX,mLACQ,2BACIgB,KAAK,OACLc,MAAOH,EACPI,WA/CF,SAAA7B,GAER,UAAVA,EAAE8B,KAAmBL,EAAUM,SAE/BR,EAAS,CACLT,KAAM,WACNkB,QAAS,CACLC,SAAUtC,EAAMqB,QAChBkB,KAAM,CACFnB,MAAOU,EACPjB,GAAI2B,MACJrB,KAAMnB,EAAMmB,KACZL,UAAU,OACVX,UAAU,WAKtB4B,EAAa,IACb/B,EAAMgC,kBA6BcS,SAAU,SAAAC,GAAK,OAAIX,EAAaW,EAAM1B,OAAOiB,UAEjD,yBAAK9B,UAAU,iBACX,4BACIC,QAASH,GADb,8CAGA,4BACIG,QAlFb,SAAAC,GAEXA,GACAA,EAAEsC,iBAGFb,EAAUM,SACVR,EAAS,CACLT,KAAM,WACNkB,QAAS,CACLC,SAAUtC,EAAMqB,QAChBkB,KAAM,CACFnB,MAAOU,EACPjB,GAAI2B,MACJrB,KAAMnB,EAAMmB,KACZL,UAAU,OACVX,UAAU,WAKtB4B,EAAa,IACb/B,EAAMgC,mBA2Dc,+F,gBCjDjBY,MAvCf,YAA2E,IAAnDC,EAAkD,EAAlDA,WAAYC,EAAsC,EAAtCA,UAAWzB,EAA2B,EAA3BA,QAASF,EAAkB,EAAlBA,KAAM4B,EAAY,EAAZA,QAAY,EAExCrC,mBAAS,MAF+B,mBAE9DsC,EAF8D,KAEtDC,EAFsD,KAgBhEC,EAAe,CACjBC,WAAYJ,GAGhB,OACI,yBAAK5C,UAAU,eACX,yBAAKA,UAAU,qBACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,SAASiD,MAAOF,IAC/B,2BAAIJ,IAEPD,GACG,kBAAC,IAAD,CAAUzC,QAlBR,WAEd6C,GAAU,OAoBLD,GACL,kBAAC,EAAD,CAAchB,cA7BI,WAElBiB,EAAU,OA2BmC5B,QAASA,EAASF,KAAMA,MCgC9DkC,MAjEf,YAA8E,IAA7DxC,EAA4D,EAA5DA,GAAIV,EAAwD,EAAxDA,UAAWmD,EAA6C,EAA7CA,MAAOnC,EAAsC,EAAtCA,KAAM0B,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,UAAWS,EAAS,EAATA,MAExD3B,EAAaC,qBAAWL,GAAxBI,SAgDR,OACI,yBAAKzB,UAAU,gBACP,kBAAC,EAAD,CAAa0C,WAAYA,EAAYC,UAAWA,EAAWzB,QAASR,EAAIM,KAAMA,EAAM4B,QAASQ,IACjG,yBACI1C,GAAIA,EACJV,UAAWA,EACXqD,OApDC,SAAAnD,GAETA,EAAEsC,iBAEF,IAKyBc,EAAYC,EAL/B1C,EAASX,EAAEY,aAAa0C,QAAQ,UAChCC,EAAgBC,KAAKC,MAAM9C,GAE5B4C,IAWDzC,GAAQyC,EAAczC,OATDsC,EAS0BtC,EATduC,EASoBE,EAAczC,KAL/DsC,EAAaC,GAAa,GAAKD,EAAaC,IAAc,IAO9D9B,EAAS,CACLT,KAAM,eACNkB,QAAS,CACL0B,aAAcH,EAActB,SAC5Bf,QAASqC,EAAc/C,GACvB6C,UAAWvC,EACX6C,aAAcnD,EACd0B,KAAM,CACF1B,GAAI+C,EAAc/C,GAClBV,UAAW,OACXW,UAAW,OACXK,KAAMA,EACNC,MAAOwC,EAAcxC,YAqB7BE,WAbK,SAAAjB,GAEbA,EAAEsC,mBAaOW,GAASA,EAAMW,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,eAAM/B,IAAK+B,EAAKrD,IAASqD,EAAzB,CAAgC7C,QAASR,EAAIN,WAAYuC,WCpDtFqB,MATf,YAAgC,IAAXC,EAAU,EAAVA,OAEjB,OACI,0BAAMjE,UAAU,WACXiE,GAAUA,EAAOH,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,eAAO/B,IAAK+B,EAAKrD,IAASqD,SCRrD,WAASG,EAAOC,GAC3B,OAAQA,EAAOnD,MACb,IAAK,eACH,OAAOkD,EAAMJ,KAAI,SAAAM,GAEb,GAAIA,EAAM1D,KAAOyD,EAAOjC,QAAQ0B,aAAc,CAC1C,IAAMS,EAAYD,EAAMjB,MAAMmB,WAAU,SAAAlC,GAAI,OAAIA,EAAK1B,KAAOyD,EAAOjC,QAAQd,WAE3EgD,EAAMjB,MAAMoB,OAAOF,EAAW,GASlC,OALID,EAAM1D,KAAOyD,EAAOjC,QAAQ2B,cAE5BO,EAAMjB,MAAMqB,KAAKL,EAAOjC,QAAQE,MAG7BgC,KAEb,IAAK,WACJ,OAAOF,EAAMJ,KAAI,SAAAM,GAOZ,OALIA,EAAM1D,KAAOyD,EAAOjC,QAAQC,UAE5BiC,EAAMjB,MAAMqB,KAAKL,EAAOjC,QAAQE,MAG7BgC,KAGb,QACE,OAAOF,ICgBAO,EA/CK,CAChB,CACI/D,GAAI,UACJM,KAAM,EACNhB,UAAU,QACV0C,YAAY,EACZC,UAAW,uCACXS,MAAO,OACPD,MAAO,CACH,CAAEzC,GAAG,SAAUV,UAAU,OAAQW,UAAU,OAAQK,KAAM,EAAGC,MAAO,aAE3E,CACIP,GAAI,UACJM,KAAM,EACNhB,UAAU,QACV0C,YAAY,EACZC,UAAW,8CACXS,MAAO,QACPD,MAAO,CACH,CAAEzC,GAAG,SAAUV,UAAU,OAAQW,UAAU,OAAQK,KAAM,EAAGC,MAAO,aAG3E,CACIP,GAAI,UACJM,KAAM,EACNhB,UAAU,QACV0C,YAAY,EACZC,UAAW,6CACXS,MAAO,SACPD,MAAO,CACH,CAAEzC,GAAG,SAAUV,UAAU,OAAQW,UAAU,OAAQK,KAAM,EAAGC,MAAO,eAG3E,CACIP,GAAI,UACJM,KAAM,EACNhB,UAAU,QACV0C,YAAY,EACZC,UAAW,yDACXS,MAAO,OACPD,MAAO,CACH,CAAEzC,GAAG,SAAUV,UAAU,OAAQW,UAAU,OAAQK,KAAM,EAAGC,MAAO,eCbhEyD,MArBf,WAAgB,IAAD,EAEeC,qBAAWC,EAAUlB,KAAKC,MAAMkB,aAAaC,QAAQ,YAAcL,GAFlF,mBAEJP,EAFI,KAEGzC,EAFH,KAQX,OAJAsD,qBAAU,WACNF,aAAaG,QAAQ,SAAUtB,KAAKuB,UAAUf,MAC/C,CAACA,IAGA,kBAAC7C,EAAQ6D,SAAT,CAAkBpD,MAAO,CACrBL,aAEA,yBAAKzB,UAAU,OACP,kBAAC,EAAD,CACIiE,OAAQC,OCTZiB,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCbRC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,SD4HpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAAAC,GACFA,EAAaC,gBAEhBC,OAAM,SAAAC,GACHC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.64e87005.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\nimport '../../../styles/Popup.css';\r\nimport '../../../styles/Main.css';\r\n\r\nfunction CardInfo( props ) {\r\n\r\n    const closePopupNoPropagation = e => {\r\n\r\n        e.stopPropagation();\r\n\r\n    };\r\n\r\n    const closePopup = () => {\r\n\r\n        props.closeCardInfoHandler();\r\n\r\n    };\r\n\r\n    return (\r\n        <div \r\n            className=\"popup-container\" \r\n            onClick={closePopup}\r\n        >\r\n            <div className=\"popup-content\"\r\n    \r\n                onClick={closePopupNoPropagation}\r\n            >\r\n                <div className=\"header\">\r\n                    <form>\r\n                        <main>\r\n                            <h2>Подробная информация о задаче:</h2>\r\n                            <div className=\"text-wrapper\">\r\n                                <p> Этап задачи: {props.board_name}</p>\r\n                                <p> Текст задачи: {props.card_title}</p>\r\n                            </div>\r\n                            <div className=\"close-wrapper\">\r\n                                <button \r\n                                    onClick={closePopup}\r\n                                >Закрыть</button>\r\n                            </div>\r\n                        </main>\r\n                    </form>\r\n                </div>\r\n            </div>  \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardInfo;\r\n","import React, { useState } from 'react';\r\nimport CardInfo from './CardPopup/CardInfo';\r\nimport '../../styles/Main.css';\r\n\r\nfunction Card(props) {\r\n\r\n    const [ isShowInfo, setIsShowInfo] = useState(null);\r\n\r\n    const closeCardInfoHandler = () => {\r\n \r\n        setIsShowInfo(null);\r\n \r\n    };\r\n\r\n    const showCardInfoHandler = () => {\r\n\r\n        setIsShowInfo(true);\r\n\r\n    };\r\n\r\n    const dragStart = e => {\r\n        const target = e.target;\r\n\r\n        e.dataTransfer.setData('cardId', `{\"target\": \"${target.id}\", \"id\": \"${props.id}\", \"type\": \"${props.type}\", \"title\": \"${props.title}\", \"board_id\": \"${props.boardId}\" }`);\r\n\r\n    };\r\n\r\n    const dragOver = e => {\r\n\r\n        e.stopPropagation();\r\n\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div\r\n                onClick={ showCardInfoHandler }\r\n                id={props.id}\r\n                className={props.className}\r\n                draggable={props.draggable}\r\n                onDragStart={dragStart}\r\n                onDragOver={dragOver}\r\n            >\r\n                <p>{props.title}</p> \r\n        \r\n            </div>\r\n            {isShowInfo &&\r\n    <CardInfo closeCardInfoHandler={ closeCardInfoHandler } card_id ={props.id} card_title={props.title} board_name={props.board_name}/>\r\n            }       \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\n\r\nexport const Context = React.createContext();","\r\nimport React, { useState, useContext }  from 'react';\r\nimport { Context } from '../../../context';\r\nimport * as uuid from \"uuid\";\r\nimport '../../../styles/Popup.css';\r\nimport '../../../styles/Main.css';\r\n\r\nfunction AddCardPopup( props ) {\r\n\r\n    const { dispatch } = useContext(Context);\r\n\r\n    const [cardTitle, setCardTitle] = useState('');\r\n\r\n    const createCard = e => {\r\n        \r\n        if (e) {\r\n            e.preventDefault();\r\n        }\r\n\r\n        if (cardTitle.length) {\r\n            dispatch({\r\n                type: 'ADD_CARD',\r\n                payload: {\r\n                    board_id: props.boardId,\r\n                    card: {\r\n                        title: cardTitle,\r\n                        id: uuid.v4(),\r\n                        type: props.type,\r\n                        draggable:\"true\",\r\n                        className:\"card\"\r\n                    }\r\n                }\r\n            });\r\n        \r\n            setCardTitle('');\r\n            props.setPopupValue();\r\n            \r\n        }\r\n    };\r\n\r\n    const createCardByEnter = e => {\r\n\r\n        if (e.key === 'Enter' && cardTitle.length) {\r\n\r\n            dispatch({\r\n                type: 'ADD_CARD',\r\n                payload: {\r\n                    board_id: props.boardId,\r\n                    card: {\r\n                        title: cardTitle,\r\n                        id: uuid.v4(),\r\n                        type: props.type,\r\n                        draggable:\"true\",\r\n                        className:\"card\"\r\n                    }\r\n                }\r\n            });\r\n\r\n            setCardTitle('');\r\n            props.setPopupValue();\r\n\r\n        }\r\n    };\r\n\r\n    const closePopupNoPropagation = e => {\r\n        e.stopPropagation();\r\n        \r\n    };\r\n\r\n    const closePopup = () => {\r\n\r\n        props.setPopupValue();\r\n    };\r\n    return (\r\n        <div \r\n            className=\"popup-container\" \r\n            onClick={closePopup}\r\n        >\r\n            <div className=\"popup-content\"\r\n        \r\n                onClick={closePopupNoPropagation}\r\n            >\r\n                <div className=\"create-wrapper\">\r\n                    <h2>Введите заголовок карточки:</h2>\r\n                            <input\r\n                                type=\"text\" \r\n                                value={cardTitle}\r\n                                onKeyPress={createCardByEnter}\r\n                                onChange={event => setCardTitle(event.target.value)}\r\n                            /> \r\n                            <div className=\"close-wrapper\">\r\n                                <button \r\n                                    onClick={closePopup}\r\n                                >Закрыть</button>\r\n                                <button\r\n                                    onClick={createCard}\r\n                                >Cоздать карточку</button>\r\n                            </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n    );\r\n}\r\n\r\nexport default AddCardPopup;\r\n","import React, { useState } from 'react';\r\nimport AddCardPopup from './BoardPopup/AddCardPopup';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport '../../styles/Main.css';\r\n\r\n\r\nfunction BoardHeader( { canBeAdded, boardName, boardId, type, colorBg } ) {\r\n\r\n    const [ isShow, setIsShow ] = useState(null);\r\n\r\n    const setPopupValue = () => {\r\n        \r\n        setIsShow(null);\r\n            \r\n    };\r\n\r\n    const showPopup = () => {\r\n\r\n        setIsShow(true);\r\n\r\n    };\r\n\r\n    const style_circle = {\r\n        background: colorBg,\r\n    };\r\n\r\n    return (\r\n        <div className=\"boardheader\">\r\n            <div className=\"boardheader__body\">\r\n                <div className=\"titlebody\">\r\n                    <div className=\"circle\" style={style_circle}></div>\r\n                    <p>{boardName}</p>\r\n                </div>\r\n                {canBeAdded &&\r\n                    <AddIcon  onClick={ showPopup}/>\r\n                }\r\n               \r\n            </div>\r\n            {isShow &&\r\n        <AddCardPopup setPopupValue={setPopupValue } boardId={boardId} type={type}/>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BoardHeader;\r\n","import React, { useContext } from 'react';\r\nimport Card from '../CardModule/Card';\r\nimport BoardHeader from './BoardHeader';\r\nimport { Context } from '../../context';\r\nimport '../../styles/Main.css';\r\n\r\nfunction Board({ id, className, cards, type, canBeAdded, boardName, color }) {\r\n\r\n    const { dispatch } = useContext(Context);\r\n\r\n    const drop = e => {\r\n\r\n        e.preventDefault();\r\n\r\n        const target = e.dataTransfer.getData('cardId');\r\n        const target_parsed = JSON.parse(target);\r\n\r\n        if (!target_parsed) return;\r\n\r\n        function isDifferMoreOne(board_type, card_type) {\r\n            const is_right_differ = true;\r\n            const is_wrong_differ = false;\r\n\r\n            if (board_type - card_type == 1 || board_type - card_type == -1) return is_right_differ;\r\n\r\n            return is_wrong_differ;\r\n        }\r\n\t\r\n        if (type == target_parsed.type  || isDifferMoreOne(type, target_parsed.type)) {\r\n\r\n            dispatch({\r\n                type: 'UPDATE_CARDS',\r\n                payload: {\r\n                    board_old_id: target_parsed.board_id,\r\n                    card_id: target_parsed.id,\r\n                    card_type: type,\r\n                    board_new_id: id,\r\n                    card: {\r\n                        id: target_parsed.id,\r\n                        className: \"card\",\r\n                        draggable: \"true\",\r\n                        type: type,\r\n                        title: target_parsed.title\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n    };\r\n\r\n    const dragOver = e => {\r\n\r\n        e.preventDefault();\r\n\r\n    };\r\n\r\n    return (\r\n        <div className=\"boardwrapper\">\r\n                <BoardHeader canBeAdded={canBeAdded} boardName={boardName} boardId={id} type={type} colorBg={color}/>\r\n            <div\r\n                id={id}\r\n                className={className}\r\n                onDrop={drop}\r\n                onDragOver= {dragOver}\r\n            >\r\n                {cards && cards.map(item => <Card key={item.id } {...item } boardId={id} board_name={boardName}/>)}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Board;\r\n","import React from 'react';\r\nimport Board from './Board';\r\nimport '../../styles/Main.css';\r\n\r\nfunction BoardList({ boards }) {\r\n\r\n    return (\r\n        <main className=\"flexbox\">\r\n            {boards && boards.map(item => <Board key={item.id } {...item}/>)}\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default BoardList;","export default function(state, action) {\r\n    switch (action.type) {\r\n      case 'UPDATE_CARDS':\r\n        return state.map(board => {\r\n\r\n            if (board.id === action.payload.board_old_id) {\r\n                const cardIndex = board.cards.findIndex(card => card.id === action.payload.card_id);\r\n\r\n                board.cards.splice(cardIndex, 1);\t\r\n\r\n            }\r\n\r\n            if (board.id === action.payload.board_new_id) {\r\n\r\n                board.cards.push(action.payload.card);\r\n\r\n            }\r\n            return board;\r\n        });\r\n      case 'ADD_CARD':\r\n       return state.map(board => {\r\n\r\n            if (board.id === action.payload.board_id) {\r\n\r\n                board.cards.push(action.payload.card);\r\n            }\r\n            \r\n            return board;\r\n        });\r\n\r\n      default:\r\n        return state;\r\n    }\r\n}","const BASE_STATE =  [\r\n    {\r\n        id: 'board-1',\r\n        type: 1,\r\n        className:'board',\r\n        canBeAdded: true,\r\n        boardName: 'Наряды',\r\n        color: 'grey',\r\n        cards: [\r\n            { id:\"card-1\", className:\"card\", draggable:\"true\", type: 1, title: 'cardOne' },\r\n        ] },\r\n    {\r\n        id: 'board-2',\r\n        type: 2,\r\n        className:'board',\r\n        canBeAdded: false,\r\n        boardName: 'В работе',\r\n        color: 'green',\r\n        cards: [\r\n            { id:\"card-2\", className:\"card\", draggable:\"true\", type: 2, title: 'cardTwo' },\r\n        ]\r\n    },\r\n    {\r\n        id: 'board-3',\r\n        type: 3,\r\n        className:'board',\r\n        canBeAdded: false,\r\n        boardName: 'Приёмка',\r\n        color: 'orange',\r\n        cards: [\r\n            { id:\"card-3\", className:\"card\", draggable:\"true\", type: 3, title: 'cardThree' },\r\n        ]\r\n    },\r\n    {\r\n        id: 'board-4',\r\n        type: 4,\r\n        className:'board',\r\n        canBeAdded: false,\r\n        boardName: 'Завершено',\r\n        color: 'blue',\r\n        cards: [\r\n            { id:\"card-4\", className:\"card\", draggable:\"true\", type: 4, title: 'cardFour' },\r\n        ]\r\n        \r\n    },\r\n];\r\n\r\nexport default BASE_STATE;\r\n ","import React, { useReducer, useEffect } from 'react';\nimport BoardList from './components/BoardModule/BoardList';\nimport { Context } from './context';\nimport reducer from './reducer';\nimport BASE_STATE from './utils/BaseState';\nimport './styles/Main.css';\n\nfunction App() {\n \n    const [state, dispatch] = useReducer(reducer, (JSON.parse(localStorage.getItem('boards')) || BASE_STATE));\n\n    useEffect(() => {\n        localStorage.setItem('boards', JSON.stringify(state));\n    }, [state]);\n\n    return (\n        <Context.Provider value={{\n            dispatch\n        }}>\n            <div className=\"App\">\n                    <BoardList\n                        boards={state}\n                    ></BoardList>\n            </div>\n        </Context.Provider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}